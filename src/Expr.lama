-- Expression evaluator

import List;
import State;
import World;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Seq     (expr, expr)         |
--        Skip                         |
--        Read    (string)             |
--        Write   (expr)               |
--        If      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Ignore  (expr)

-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}


fun eval (c@[s, w], expr) {
  -- printf("Trying to eval expr: %s\n\twith context: %s\n\n", expr.string, c.string);
  case expr of
      Var (x) -> [c, s(x)]
    | Ref (x) -> [c, x]
    | Const (x) -> [c, x]
    | Skip -> [c, Void]
    | Seq (s1, s2) -> case eval(c, s1) of 
        [c, _] -> eval(c, s2)
      esac
    | Read (x) -> case readWorld(w) of 
        [v, w] -> [[s <- [x, v], w], Void]
      esac
    | Write (e) -> case eval(c, e) of 
        [[s, w], value] -> [[s, writeWorld(value, w)], Void]
      esac
    | If (e, s1, s2) -> case eval(c, e) of 
          [c, 0] -> eval(c, s2)
        | [c, _] -> eval(c, s1)
      esac
    | Ignore (e) -> case eval(c, e) of 
        [c, _] -> [c, Void]
      esac                         
    | Assn(e1, e2) -> case eval(c, e2) of 
        [c, e2Val] -> case eval(c, e1) of 
            [[s, w], e1Val] -> [[s <- [e1Val, e2Val], w], e2Val]
          esac
      esac 
  | DoWhile (e1, e) -> eval (c, Seq (e1, While (e, e1)))
  | Binop (op, e1, e2) -> 
      case eval (c, e1) of [c, v1] ->
        case eval (c, e2) of [c, v2] ->
          [c, evalOp (op, v1, v2)]
      esac esac
  | While (exp, stmt) -> case eval(c, exp) of 
        [c, 0] -> [c, Void]
      | [c, _] -> eval(c, Seq (stmt, While (exp, stmt)))
    esac
  | x -> failure ("Cannot match expression %s\n", x.string)
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  -- printf("Trying to evalExpr for expr: %s\n", expr.string);
  case eval ([emptyState, createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
