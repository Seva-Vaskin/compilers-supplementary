-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Sexp    (string, expr list)  |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

fun addDefinitions(s, defs) {
  foldl(fun (cs, def) {
    case def of
        Var(x) -> addNames(cs, x)
      | Fun(name, args, body) -> addFunction(cs, name, args, body)
    esac
  }, s, defs)
}

fun addValues(state, args, vals) {
  fun myAddName(s, [x, v]) {
    addName(s, x, v)
  }
  foldl(myAddName, state, zip(args, vals))
}

fun eval(c@[s, w], expr) {
  case expr of
    Var (x) -> [c, lookup(s, x)]
    | Ref (x) -> [c, x]
    | Const (x) -> [c, x]
    | Skip -> [c, Void]
    | Seq (s1, s2) -> case eval(c, s1) of 
        [c, _] -> eval(c, s2)
      esac
    | If (e, s1, s2) -> 
      case eval(c, e) of 
          [c, 0] -> eval(c, s2)
        | [c, _] -> eval(c, s1)
      esac
    | Ignore (e) -> case eval(c, e) of 
        [c, _] -> [c, Void]
      esac 
    | Set(name, value)             -> eval(c, Assn(Ref(name), value))
    | Assn (e1, e2) -> case evalList(c, {e1, e2}) of
        [c@[st, w], {n, v}] -> case n of
            ElemRef(name, idx) -> [c, name[idx] := v]
            | _ -> [[st <- [n, v], w], v]
        esac
    esac
    | While (exp, stmt) -> case eval(c, exp) of 
        [c, 0] -> [c, Void]
      | [c, _] -> eval(c, Seq (stmt, While (exp, stmt)))
    esac
    | DoWhile (e1, e) -> eval (c, Seq (e1, While (e, e1)))
    | Binop (op, e1, e2) -> 
        case eval (c, e1) of [c, v1] ->
          case eval (c, e2) of [c, v2] ->
            [c, evalOp (op, v1, v2)]
          esac 
        esac
    | Call(name, args) -> case lookup(s, name) of
            Fun(fArgs, body) -> case evalList(c, args) of 
                [[stOut, w], vals] -> case body of
                  External -> case evalBuiltin(name, vals, w) of
                        [value, w] -> [[stOut, w], value]
                      esac
                | _ -> case enterFunction(stOut) of
                    stIn -> case addValues(stIn, fArgs, vals) of
                      stIn -> case eval([stIn, w], body) of
                                [[stAfter, w], value] -> 
                                    [[leaveFunction(stOut, getGlobal(stAfter)), w], value]
                              esac
                            esac
                      esac
                esac
              esac
            esac    
    | Scope(defs, exp) -> case enterScope(s) of 
        s -> case addDefinitions(s, defs) of 
          s -> case eval([s, w], exp) of 
            [[s, w], v] -> [[leaveScope(s), w], v]
          esac
        esac
      esac
    | Array(exps) -> case evalList(c, exps) of
                        [c, vals] -> [c, listArray(vals)]
                      esac
    | Elem(name, idx) -> case evalList(c, {name, idx}) of
            [c, {name, idx}] -> case name of
              Sexp(_, name) -> [c, name[idx]]
              | _ -> [c, name[idx]]
            esac
          esac
    | ElemRef(name, idx) -> case evalList(c, { name, idx }) of
            [c, { name, idx }] -> case name of
              Sexp(_, name) -> [c, ElemRef(name, idx)]
              | _ -> [c, ElemRef(name, idx)]
            esac
          esac
    | String(s) -> [c, s]
    | Sexp(name, exps) -> case evalList(c, exps) of
                            [c, exps] -> [c, Sexp(name, listArray(exps))]
                          esac
    | x -> failure ("Cannot match expression %s\n", string(x))
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
