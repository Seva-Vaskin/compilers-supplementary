-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun makeBinop(l, op, r) {
  Binop (op, l, r)
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr (
        {
          [Left, {[s ("!!"), makeBinop]}],
          [Left, {[s ("&&"), makeBinop]}],
          [Nona, {[s ("!="), makeBinop], [s ("=="), makeBinop], [s ("<="), makeBinop], 
                  [s (">="), makeBinop], [s ("<"), makeBinop], [s (">"), makeBinop]}],
          [Left, {[s ("+"), makeBinop], [s ("-"), makeBinop]}],
          [Left, {[s ("*"), makeBinop], [s ("%"), makeBinop], [s ("/"), makeBinop]}]
        }
      , primary);

var simpleStmt = memo $ eta syntax (
  kSkip { Skip } | 
  x=lident s[":="] e=exp { Assn(x, e) } | 
  kRead x=inbr[s("("), lident, s(")")] { Read(x) } | 
  kWrite x=inbr[s("("), exp, s(")")] { Write(x) } | 
  kIf x=exp kThen s1=stmt s2=afterIf { If(x, s1, s2) } | 
  kWhile x=exp kDo s=stmt kOd { While(x, s) }   |
  kDo s=stmt kWhile ex=exp kOd { DoWhile(s, ex) } |
  kFor s1=stmt x=inbr[s(","), exp, s(",")] s2=stmt kDo s3=stmt kOd {
    Seq(s1, While(x, Seq(s3, s2)))
  }
  );

var afterIf = memo $ eta syntax(
  kElif ex=exp kThen s1=stmt s2=afterIf { If(ex, s1, s2) } |
  kElse s=stmt kFi { s }                                          |
  kFi { Skip }
);


var stmt = memo $ eta syntax (
  s=simpleStmt { s } | 
  sl=simpleStmt s[";"] sr=stmt {Seq (sl, sr)}
);
   

-- Public top-level parser
public parse = stmt;
