-- Stack machine.

import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ         -> "READ"
  | WRITE        -> "WRITE"
  | BINOP (s)    -> sprintf ("BINOP %s", s)
  | LD    (x)    -> sprintf ("LD %s", x)
  | LDA   (x)    -> sprintf ("LDA %s", x)
  | ST    (x)    -> sprintf ("ST %s", x)
  | STI          -> "STI"
  | CONST (n)    -> sprintf ("CONST %d", n)
  | LABEL (s)    -> sprintf ("LABEL %s", s)
  | JMP   (l)    -> sprintf ("JMP %s", l)
  | CJMP  (c, l) -> sprintf ("CJMP %s, %s", c, l)
  | DUP          -> "DUP"
  | DROP         -> "DROP"  
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];
  
  var res = [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }];
  -- printf("initEvalEnv res: %s\n", res);
  res
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, an SM-configuration and a program,
-- returns a final configuration
fun eval (env, conf@[st, s, w], insns) {
    -- printf("Trying to eval insns: %s\n\twith conf: %s\n", insns.string, conf.string);
    case insns of 
    {} -> conf
    | ins:tail -> 
      -- printf("Trying to match ins: %s\n", ins.string);
      case ins of 
        READ -> case readWorld(w) of 
                [n, w] -> eval(env, [n:st, s, w], tail)
              esac
        | WRITE -> case st of 
                    n:st -> eval(env, [st, s, writeWorld(n, w)], tail)
                  esac
        | BINOP (op) -> case st of 
                      x:y:st -> eval(env, [evalOp(op, y, x) : st, s, w], tail)
                      esac
        | LD (x) -> eval(env, [s(x):st, s, w], tail)
        | ST (x) -> case st of 
                      n:st -> eval(env, [n:st, s <- [x, n], w], tail)
                    esac
        | CONST (n) -> eval(env, [n:st, s, w], tail)
        | LABEL (_) -> eval(env, conf, tail)
        | JMP (l) -> eval(env, conf, env.fromLabel(l))
        | CJMP (cond, l) -> case cond of 
            "z" -> case st of 
              n:st -> eval(env, [st, s, w], if n == 0 then env.fromLabel(l) else tail fi)
            esac
            | "nz" -> case st of 
              n:st -> eval(env, [st, s, w], if n != 0 then env.fromLabel(l) else tail fi)
            esac
          esac
        | LDA (x) -> eval(env, [x:st, s, w], tail)
        | STI -> case st of 
            a:b:st -> eval(env, [a:st, s <- [b, a], w], tail)
          esac
        | DROP -> 
          -- printf("st: %s\n", st.string);
          case st of 
            a:st -> eval(env, [st, s, w], tail)
          esac
        | DUP -> case st of
            a:st -> eval(env, [a:a:st, s, w], tail)
          esac
      esac
    | other -> printf("Found strange value: %s\n", other)
    esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  -- printf("EvalSM with insns: %s\n", insns.string);
  eval (initEvalEnv (insns), [{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compilation environment: generates labels
fun makeCompEnv (n) {
  [fun () {
     [sprintf ("L%d", n), makeCompEnv (n+1)]
  }]
}

fun initCompEnv () {
  makeCompEnv (0)
}

-- Accessor function: generates one label
fun genLabel (env) {
  env [0] ()
}

-- Utility function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case env.genLabel of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }
  
  fun compile (lab, env, stmt) {
    -- printf("Trying to compile stmt: %s\n", stmt.string);
    case stmt of
      Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (x))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (x))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Read  (x)      -> [false, env, singletonBuffer (READ) <+ ST (x)]
    | Write (e)      -> 
        case genLabel(env) of 
          [writeLabel, env] -> 
            case compile(writeLabel, env, e) of 
              [writeLabelUsed, env, eCompiled] -> [false, env, eCompiled <+> label(writeLabel, writeLabelUsed) <+ WRITE]
            esac
        esac
    | Assn (x, e) -> 
        case genLabels(env, 2) of 
          [xLabel, eLabel, env] -> 
            case compile(xLabel, env, x) of 
              [xLabelUsed, env, xCompiled] -> 
                case compile (eLabel, env, e) of 
                  [eLabelUsed, env, eCompiled] -> 
                    [false, env, xCompiled <+> label(xLabel, xLabelUsed) <+> eCompiled <+> label(eLabel, eLabelUsed) <+ STI]
                esac
            esac
        esac
    | Seq (s1, s2) ->
      case env.genLabel of
        [s2Lab, env] ->
          case compile (s2Lab, env, s1) of
            [s2LabUsed, env, s1Code] ->
                case compile (lab, env, s2) of
                  [labUsed, env, s2Code] -> [labUsed, env, s1Code <+> label (s2Lab, s2LabUsed) <+> s2Code]
                esac
          esac
      esac
    | If (exp, s1, s2) -> 
      case genLabels(env, 2) of 
        [expLabel, elseLabel, env] -> 
          case compile(expLabel, env, exp) of  
            [expLabelUsed, env, expCompiled] -> 
              case compile(lab, env, s1) of 
                [_, env, s1Compiled] -> 
                  case compile(lab, env, s2) of 
                    [_, env, s2compiled] -> 
                      [true, env, expCompiled <+>
                                  label(expLabel, expLabelUsed) 
                                  <+ CJMP("z", elseLabel) 
                                  <+> s1Compiled
                                  <+ JMP(lab)
                                  <+> label(elseLabel, true)
                                  <+> s2compiled]
                  esac
              esac
          esac
      esac
    | While (exp, st) -> 
      case genLabels(env, 2) of 
        [beforeExpLabel, beforeStLabel , env] -> 
          case compile(beforeStLabel, env, exp) of 
            [beforeStLabelUsed, env, expCompiled] -> 
              case compile(beforeExpLabel, env, st) of 
                [_, env, stCompiled] -> 
                  [true, env, label(beforeExpLabel, true) 
                              <+> expCompiled
                              <+ CJMP("z", lab)
                              <+> label(beforeStLabel, beforeStLabelUsed)
                              <+> stCompiled
                              <+ JMP(beforeExpLabel)]
              esac
          esac
      esac
    | DoWhile (st, exp) -> 
      case genLabels(env, 2) of 
        [beforeStLabel, beforeExpLabel, env] -> 
          case compile(beforeStLabel, env, exp) of 
            [beforeExpLabelUsed, env, expCompiled] -> 
              case compile(beforeExpLabel, env, st) of 
                [_, env, stCompiled] -> 
                  [false, env, label(beforeStLabel, true)
                               <+> stCompiled
                               <+> label(beforeExpLabel, beforeExpLabelUsed)
                               <+> expCompiled
                               <+ CJMP("nz", beforeStLabel) ]
              esac
          esac
      esac
    | Ignore (e) -> 
        case genLabel(env) of 
          [eLabel, env] -> 
            case compile(eLabel, env, e) of 
              [eLabelUsed, env, eCompiled] -> 
                [false, env, eCompiled <+> label(eLabel, eLabelUsed) <+ DROP]
            esac
        esac
    | Binop (op, e1, e2) ->
      case env.genLabels(2) of 
        [e1Label, e2Label, env1] ->
          case compile(e1Label, env1, e1) of 
            [e1LabelUsed, env2, e1Compiled] ->
              case compile(e2Label, env2, e2) of 
                [e2LabelUsed, env3, e2Compiled] ->
                  [false, env3, e1Compiled 
                                <+> label(e1Label, e1LabelUsed) 
                                <+> e2Compiled 
                                <+> label(e2Label, e2LabelUsed) 
                                <+ BINOP(op)]
              esac
          esac 
      esac
    | op              -> failure ("compileSM not implemented for op: %s\n", op.string)
    esac
  }

  case initCompEnv ().genLabel of
    [endLab, env] ->
       case compile (endLab, env, stmt) of
         [endLabUsed, _, code] -> getBuffer $ code <+> label (endLab, endLabUsed) 
       esac
  esac
}
